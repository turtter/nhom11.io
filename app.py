import streamlit as st
from PIL import Image, ImageDraw
import torch
import torchvision
import torchvision.transforms as T
from torchvision.models.detection import FasterRCNN_ResNet50_FPN_Weights
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor


# ================================
# 1Ô∏è‚É£ H√†m load model (s·ª≠a num_classes = 4)
# ================================
def load_model(weight_path):
    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(
        weights=FasterRCNN_ResNet50_FPN_Weights.COCO_V1
    )

    # 3 l·ªõp (non_defective_phone, defective, non-phone) + 1 background
    num_classes = 4

    in_features = model.roi_heads.box_predictor.cls_score.in_features
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # Load tr·ªçng s·ªë hu·∫•n luy·ªán
    state_dict = torch.load(weight_path, map_location="cpu")
    model.load_state_dict(state_dict)

    model.eval()
    return model


# ================================
# 2Ô∏è‚É£ T·∫£i m√¥ h√¨nh ch·ªâ 1 l·∫ßn
# ================================
@st.cache_resource
def get_model():
    model_path = "fasterrcnn_phone_defect1910.pth"  # ƒë∆∞·ªùng d·∫´n file .pth c·ªßa b·∫°n
    model = load_model(model_path)
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    print("‚úÖ Model loaded and cached.")
    return model, device


# ================================
# 3Ô∏è‚É£ H√†m d·ª± ƒëo√°n cho Web App
# ================================
def predict_for_webapp(model, device, image_pil, score_thresh=0.6):
    transform = T.ToTensor()
    img_tensor = transform(image_pil).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(img_tensor)[0]

    image_with_boxes = image_pil.copy()
    draw = ImageDraw.Draw(image_with_boxes)

    # Map ID -> Nh√£n
    label_map = {
        1: "KH√îNG L·ªñI",
        2: "B·ªä L·ªñI",
        3: "KH√îNG PH·∫¢I ƒêI·ªÜN THO·∫†I"
    }

    has_detection = False
    found_defect = False
    found_nonphone = False

    for box, score, label in zip(outputs["boxes"], outputs["scores"], outputs["labels"]):
        if score > score_thresh:
            has_detection = True
            box = box.cpu().numpy()
            label_id = int(label.cpu().numpy())

            # M√†u khung
            if label_id == 1:
                color = "lime"
            elif label_id == 2:
                color = "red"
                found_defect = True
            elif label_id == 3:
                color = "blue"
                found_nonphone = True
            else:
                color = "white"

            # V·∫Ω khung v√† nh√£n
            draw.rectangle([(box[0], box[1]), (box[2], box[3])], outline=color, width=3)
            text = f"{label_map.get(label_id, 'N/A')}: {score:.2f}"
            text_x, text_y = box[0], max(0, box[1] - 20)
            bbox = draw.textbbox((text_x, text_y), text)
            draw.rectangle(bbox, fill="black")
            draw.text((text_x, text_y), text, fill="yellow")

    # ================================
    # 4Ô∏è‚É£ Logic k·∫øt lu·∫≠n
    # ================================
    if not has_detection or found_nonphone:
        return "NO_PHONE", image_with_boxes
    elif found_defect:
        return "DEFECTIVE", image_with_boxes
    else:
        return "NON_DEFECTIVE", image_with_boxes


# ================================
# 5Ô∏è‚É£ Giao di·ªán Streamlit
# ================================
st.set_page_config(layout="wide", page_title="Phone Defect Detection")

st.title("üì± ·ª®ng d·ª•ng Ph√°t hi·ªán L·ªói ƒêi·ªán tho·∫°i (3 l·ªõp)")
st.write("T·∫£i l√™n ·∫£nh ƒëi·ªán tho·∫°i ƒë·ªÉ m√¥ h√¨nh ph√¢n lo·∫°i: **KH√îNG L·ªñI**, **B·ªä L·ªñI**, ho·∫∑c **KH√îNG PH√ÅT HI·ªÜN RA ƒêI·ªÜN THO·∫†I**.")

model, device = get_model()

col1, col2 = st.columns(2)

with col1:
    uploaded_file = st.file_uploader("üì§ Ch·ªçn m·ªôt ·∫£nh", type=["jpg", "jpeg", "png"])

with col2:
    st.write("### üîç K·∫øt qu·∫£ d·ª± ƒëo√°n")

    if uploaded_file is not None:
        image = Image.open(uploaded_file).convert("RGB")
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            detection_status, result_image = predict_for_webapp(model, device, image, score_thresh=0.6)

            if detection_status == "DEFECTIVE":
                st.error("‚ùå **K·∫æT QU·∫¢: PH√ÅT HI·ªÜN ƒêI·ªÜN THO·∫†I B·ªä L·ªñI (V·ª† ho·∫∑c B·∫®N )**")
            elif detection_status == "NON_DEFECTIVE":
                st.success("‚úÖ **K·∫æT QU·∫¢: ƒêI·ªÜN THO·∫†I KH√îNG L·ªñI**")
            elif detection_status == "NO_PHONE":
                st.warning("‚ö†Ô∏è **K·∫æT QU·∫¢: KH√îNG PH√ÅT HI·ªÜN RA ƒêI·ªÜN THO·∫†I**")

            st.image(result_image, caption="·∫¢nh K·∫øt Qu·∫£", use_container_width=True)
    else:
        st.info("‚¨ÜÔ∏è H√£y t·∫£i m·ªôt ·∫£nh l√™n ƒë·ªÉ xem k·∫øt qu·∫£.")
